const { ethers } = require("hardhat");

async function main() {
    console.log("ÂºÄÂßãÈÉ®ÁΩ≤ÁÆÄÂåñÁâà BeggingContract...");
    
    // Ëé∑ÂèñÈÉ®ÁΩ≤Ë¥¶Êà∑
    const [deployer] = await ethers.getSigners();
    console.log("ÈÉ®ÁΩ≤Ë¥¶Êà∑:", deployer.address);
    
    // Ëé∑ÂèñË¥¶Êà∑‰ΩôÈ¢ù
    const balance = await ethers.provider.getBalance(deployer.address);
    console.log("Ë¥¶Êà∑‰ΩôÈ¢ù:", ethers.formatEther(balance), "ETH");
    
    // ‰ΩøÁî®Ê≠£Á°ÆÁöÑÊñá‰ª∂ÂêçÔºàÂ∞èÂÜô simpleÔºâ
    console.log("\nüì¶ Ê≠£Âú®ÁºñËØëÂíåÈÉ®ÁΩ≤ÂêàÁ∫¶...");
    const BeggingContract = await ethers.getContractFactory("contracts/BeggingContract_simple.sol:BeggingContract");
    const beggingContract = await BeggingContract.deploy();
    
    console.log("‚è≥ Á≠âÂæÖÈÉ®ÁΩ≤‰∫§ÊòìÁ°ÆËÆ§...");
    await beggingContract.waitForDeployment();
    
    const contractAddress = await beggingContract.getAddress();
    console.log("\n‚úÖ BeggingContract ÈÉ®ÁΩ≤ÊàêÂäü!");
    console.log("ÂêàÁ∫¶Âú∞ÂùÄ:", contractAddress);
    console.log("ÂêàÁ∫¶ÊâÄÊúâËÄÖ:", await beggingContract.owner());
    console.log("ÂêàÁ∫¶‰ΩôÈ¢ù:", ethers.formatEther(await beggingContract.getContractBalance()), "ETH");
    console.log("ÊçêËµ†ËÄÖÊï∞Èáè:", await beggingContract.getDonatorCount());
    
    console.log("\nüîó Âú® Etherscan ‰∏äÊü•Áúã:");
    console.log(`https://sepolia.etherscan.io/address/${contractAddress}`);
    
    // ‰øùÂ≠òÈÉ®ÁΩ≤‰ø°ÊÅØ
    const deploymentInfo = {
        contractAddress: contractAddress,
        deployer: deployer.address,
        network: "sepolia",
        timestamp: new Date().toISOString(),
        txHash: beggingContract.deploymentTransaction().hash
    };
    
    console.log("\nüìÑ ÈÉ®ÁΩ≤‰ø°ÊÅØ:");
    console.log(JSON.stringify(deploymentInfo, null, 2));
    
    // È™åËØÅÂêàÁ∫¶
    if (process.env.ETHERSCAN_API_KEY) {
        console.log("\n‚è≥ Á≠âÂæÖ 6 ‰∏™Âå∫ÂùóÁ°ÆËÆ§ÂêéÈ™åËØÅÂêàÁ∫¶...");
        await beggingContract.deploymentTransaction().wait(6);
        
        try {
            console.log("üîç ÂºÄÂßãÈ™åËØÅÂêàÁ∫¶...");
            await hre.run("verify:verify", {
                address: contractAddress,
                constructorArguments: [],
            });
            console.log("‚úÖ ÂêàÁ∫¶È™åËØÅÊàêÂäü!");
        } catch (error) {
            console.log("‚ùå ÂêàÁ∫¶È™åËØÅÂ§±Ë¥•:", error.message);
            console.log("\nüìù ÊâãÂä®È™åËØÅ‰ø°ÊÅØ:");
            console.log("- ÁºñËØëÂô®ÁâàÊú¨: 0.8.20");
            console.log("- ‰ºòÂåñ: ÂêØÁî® (200 runs)");
            console.log("- ËÆ∏ÂèØËØÅ: MIT");
            console.log("- ÊûÑÈÄ†ÂáΩÊï∞ÂèÇÊï∞: Êó†");
        }
    } else {
        console.log("\n‚ö†Ô∏è  Êú™ËÆæÁΩÆ ETHERSCAN_API_KEYÔºåË∑≥ËøáËá™Âä®È™åËØÅ");
        console.log("ÊâãÂä®È™åËØÅÊó∂ËØ∑‰ΩøÁî®‰ª•‰∏ãËÆæÁΩÆ:");
        console.log("- ÁºñËØëÂô®ÁâàÊú¨: 0.8.20");
        console.log("- ‰ºòÂåñ: ÂêØÁî® (200 runs)");
        console.log("- ËÆ∏ÂèØËØÅ: MIT");
        console.log("- ÊûÑÈÄ†ÂáΩÊï∞ÂèÇÊï∞: Êó†");
    }
    
    return contractAddress;
}

main()
    .then((address) => {
        console.log("\nüéâ ÈÉ®ÁΩ≤ÂÆåÊàê! ÂêàÁ∫¶Âú∞ÂùÄ:", address);
        process.exit(0);
    })
    .catch((error) => {
        console.error("\n‚ùå ÈÉ®ÁΩ≤Â§±Ë¥•:", error);
        process.exit(1);
    });